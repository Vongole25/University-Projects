{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a70691bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "82b4bbef",
   "metadata": {},
   "outputs": [],
   "source": [
    "import plotly.express as px"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "74441884",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cadc79bc",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "496f35a0",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "d636c326",
   "metadata": {},
   "source": [
    "# 주성분분석 데이터에 군집 번호 붙이기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "853e9de5",
   "metadata": {},
   "outputs": [],
   "source": [
    "mac_folder_path = \"/Users/sunjaelee/Library/CloudStorage/Dropbox/교과/다차원자료분석PBL/기말고사/데이터/\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "df76e3d0",
   "metadata": {},
   "outputs": [],
   "source": [
    "pca_data = pd.read_csv(mac_folder_path + \"pca_data.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eb63f284",
   "metadata": {},
   "outputs": [],
   "source": [
    "clustered_data = pd.read_csv(mac_folder_path + \"grouped.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b97f7647",
   "metadata": {},
   "outputs": [],
   "source": [
    "connect = pd.read_excel(mac_folder_path + \"KIKmix.20210401.xlsx\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eb79077c",
   "metadata": {},
   "source": [
    "## 법정동 -> 행정동 변환"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "510036ae",
   "metadata": {},
   "outputs": [],
   "source": [
    "connect = connect.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cb9ce716",
   "metadata": {},
   "outputs": [],
   "source": [
    "key = connect[[\"법정동코드\", \"읍면동명\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a7dd0fa3",
   "metadata": {},
   "outputs": [],
   "source": [
    "merged_data = pca_data.merge(key, how='left', left_on='DONG_CODE', right_on='법정동코드')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eeab1741",
   "metadata": {},
   "outputs": [],
   "source": [
    "merged_data[\"DONG_NAME\"] = merged_data[\"읍면동명\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0526bc1f",
   "metadata": {},
   "outputs": [],
   "source": [
    "merged_data.drop(columns = [\"법정동코드\", \"DONG_NAME\"], inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "03381c1c",
   "metadata": {},
   "outputs": [],
   "source": [
    "merged_data[\"읍면동명\"] = merged_data[\"읍면동명\"].str.replace('제', '')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "76cd6285",
   "metadata": {},
   "outputs": [],
   "source": [
    "merged_data.loc[merged_data['읍면동명'] == '홍1동', '읍면동명'] = '홍제1동'\n",
    "merged_data.loc[merged_data['읍면동명'] == '홍2동', '읍면동명'] = '홍제2동'\n",
    "merged_data.loc[merged_data['읍면동명'] == '홍3동', '읍면동명'] = '홍제3동'\n",
    "merged_data.loc[merged_data['읍면동명'] == '종로1.2.3.4가동', '읍면동명'] = '종로1·2·3·4가동'\n",
    "merged_data.loc[merged_data['읍면동명'] == '종로5.6가동', '읍면동명'] = '종로5·6가동'\n",
    "merged_data.loc[merged_data['읍면동명'] == '금호2.3가동', '읍면동명'] = '금호2·3가동'\n",
    "merged_data.loc[merged_data['읍면동명'] == '중계2.3동', '읍면동명'] = '중계2·3동'\n",
    "merged_data.loc[merged_data['읍면동명'] == '상계6.7동', '읍면동명'] = '상계6·7동'\n",
    "merged_data.loc[merged_data['읍면동명'] == '면목3.8동', '읍면동명'] = '면목3·8동'\n",
    "merged_data.loc[merged_data['읍면동명'] == '상계3.4동', '읍면동명'] = '상계3·4동'\n",
    "merged_data.loc[merged_data['읍면동명'] == '기동', '읍면동명'] = '제기동'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9af7a841",
   "metadata": {},
   "outputs": [],
   "source": [
    "merged_data.to_csv(mac_folder_path + \"aa.csv\", index = False, encoding = 'utf-8-sig')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a02a2012",
   "metadata": {},
   "source": [
    "## 행정동 기준 pca_data - cluster_data 매칭"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9fc4e734",
   "metadata": {},
   "outputs": [],
   "source": [
    "clustered_data['읍면동명'] = clustered_data['FULL_DONG_NAME'].apply(lambda x: x.split()[-1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ec4d52c3",
   "metadata": {},
   "outputs": [],
   "source": [
    "final_data_maybe = merged_data.merge(clustered_data[[\"읍면동명\", \"Cluster\"]], on = \"읍면동명\", how = \"left\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ca25adb5",
   "metadata": {},
   "outputs": [],
   "source": [
    "final_data_maybe.to_csv(mac_folder_path + \"final_data_maybe.csv\", index = False, encoding = \"utf-8-sig\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "057570d6",
   "metadata": {},
   "source": [
    "# 그룹별 특징 확인"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8a5a95fa",
   "metadata": {},
   "source": [
    "## Land use code 매치"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "af7d89ce",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = final_data_maybe[\"LAND_USE_CODE\"].unique()\n",
    "a.sort()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "78d70e9d",
   "metadata": {},
   "outputs": [],
   "source": [
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8421b501",
   "metadata": {},
   "outputs": [],
   "source": [
    "final_data_maybe[\"LAND_USE_CODE\"] = final_data_maybe[\"LAND_USE_CODE\"].astype(object)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7c00da46",
   "metadata": {},
   "outputs": [],
   "source": [
    "final_data_maybe.loc[final_data_maybe[\"LAND_USE_CODE\"] == 110, \"LAND_USE_CODE\"] = \"단독\"\n",
    "final_data_maybe.loc[final_data_maybe[\"LAND_USE_CODE\"] == 120, \"LAND_USE_CODE\"] = \"연립\"\n",
    "final_data_maybe.loc[final_data_maybe[\"LAND_USE_CODE\"] == 130, \"LAND_USE_CODE\"] = \"다세대\"\n",
    "final_data_maybe.loc[final_data_maybe[\"LAND_USE_CODE\"] == 140, \"LAND_USE_CODE\"] = \"아파트\"\n",
    "final_data_maybe.loc[final_data_maybe[\"LAND_USE_CODE\"] == 150, \"LAND_USE_CODE\"] = \"주거나지\"\n",
    "final_data_maybe.loc[final_data_maybe[\"LAND_USE_CODE\"] == 160, \"LAND_USE_CODE\"] = \"주거기타\"\n",
    "final_data_maybe.loc[final_data_maybe[\"LAND_USE_CODE\"] == 210, \"LAND_USE_CODE\"] = \"상업용\"\n",
    "final_data_maybe.loc[final_data_maybe[\"LAND_USE_CODE\"] == 220, \"LAND_USE_CODE\"] = \"업무용\"\n",
    "final_data_maybe.loc[final_data_maybe[\"LAND_USE_CODE\"] == 230, \"LAND_USE_CODE\"] = \"상업나지\"\n",
    "final_data_maybe.loc[final_data_maybe[\"LAND_USE_CODE\"] == 240, \"LAND_USE_CODE\"] = \"상업기타\"\n",
    "final_data_maybe.loc[final_data_maybe[\"LAND_USE_CODE\"] == 310, \"LAND_USE_CODE\"] = \"주상용\"\n",
    "final_data_maybe.loc[final_data_maybe[\"LAND_USE_CODE\"] == 320, \"LAND_USE_CODE\"] = \"주상나지\"\n",
    "final_data_maybe.loc[final_data_maybe[\"LAND_USE_CODE\"] == 330, \"LAND_USE_CODE\"] = \"주상기타\"\n",
    "final_data_maybe.loc[final_data_maybe[\"LAND_USE_CODE\"] == 410, \"LAND_USE_CODE\"] = \"공업용\"\n",
    "final_data_maybe.loc[final_data_maybe[\"LAND_USE_CODE\"] == 420, \"LAND_USE_CODE\"] = \"공업나지\"\n",
    "final_data_maybe.loc[final_data_maybe[\"LAND_USE_CODE\"] == 430, \"LAND_USE_CODE\"] = \"공업기타\"\n",
    "final_data_maybe.loc[final_data_maybe[\"LAND_USE_CODE\"] == 510, \"LAND_USE_CODE\"] = \"전\"\n",
    "final_data_maybe.loc[final_data_maybe[\"LAND_USE_CODE\"] == 520, \"LAND_USE_CODE\"] = \"과수원\"\n",
    "final_data_maybe.loc[final_data_maybe[\"LAND_USE_CODE\"] == 530, \"LAND_USE_CODE\"] = \"전기타\"\n",
    "final_data_maybe.loc[final_data_maybe[\"LAND_USE_CODE\"] == 610, \"LAND_USE_CODE\"] = \"답\"\n",
    "final_data_maybe.loc[final_data_maybe[\"LAND_USE_CODE\"] == 620, \"LAND_USE_CODE\"] = \"답기타\"\n",
    "final_data_maybe.loc[final_data_maybe[\"LAND_USE_CODE\"] == 710, \"LAND_USE_CODE\"] = \"조림\"\n",
    "final_data_maybe.loc[final_data_maybe[\"LAND_USE_CODE\"] == 720, \"LAND_USE_CODE\"] = \"자연림\"\n",
    "final_data_maybe.loc[final_data_maybe[\"LAND_USE_CODE\"] == 730, \"LAND_USE_CODE\"] = \"토지임야\"\n",
    "final_data_maybe.loc[final_data_maybe[\"LAND_USE_CODE\"] == 750, \"LAND_USE_CODE\"] = \"임야기타\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "308e009f",
   "metadata": {},
   "outputs": [],
   "source": [
    "final_data_maybe.to_csv(mac_folder_path + \"final_data_maybe_2.csv\", index = False, encoding = \"utf-8-sig\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "15cf7395",
   "metadata": {},
   "outputs": [],
   "source": [
    "final_data_maybe[final_data_maybe[\"Cluster\"] == 3].head(20)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e8dea963",
   "metadata": {},
   "source": [
    "## 시각화"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ed1968c6",
   "metadata": {},
   "source": [
    "### 주성분별 그룹 박스플롯"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fd76afbb",
   "metadata": {},
   "outputs": [],
   "source": [
    "import plotly.graph_objects as go"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7b65ad6d",
   "metadata": {},
   "outputs": [],
   "source": [
    "components = ['MEDICAL_ECONOMY', 'BUILDING_SILVER', 'TRANS', 'POP_ACADEMY', 'INFRA', 'SCHOOL_SECURITY']\n",
    "\n",
    "# 각 주성분별로 박스플롯을 생성 및 출력\n",
    "for component in components:\n",
    "    fig = px.box(final_data_maybe, x='Cluster', y=component, color='Cluster', title=f'{component} by Cluster', labels={'Cluster': 'Cluster', component: 'Value'})\n",
    "    fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ca780fd5",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "63a2dc8d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a79b767e",
   "metadata": {},
   "outputs": [],
   "source": [
    "counter = final_data_maybe['LAND_USE_CODE'].value_counts().reset_index()\n",
    "counter.columns = ['용도', '빈도수']\n",
    "\n",
    "# 카운터 플롯 그리기\n",
    "fig = px.bar(counter, x='용도', y='빈도수', title='용도별 빈도수', labels={'용도':'용도', '빈도수':'빈도수'})\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b18099df",
   "metadata": {},
   "outputs": [],
   "source": [
    "group_0 = final_data_maybe[final_data_maybe[\"Cluster\"] == 0]\n",
    "group_1 = final_data_maybe[final_data_maybe[\"Cluster\"] == 1]\n",
    "group_2 = final_data_maybe[final_data_maybe[\"Cluster\"] == 2]\n",
    "group_3 = final_data_maybe[final_data_maybe[\"Cluster\"] == 3]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3050ecb3",
   "metadata": {},
   "source": [
    "### 그룹 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4d98583a",
   "metadata": {},
   "outputs": [],
   "source": [
    "sgg_0 = group_0['SIGUNGU_NAME'].value_counts().reset_index()\n",
    "sgg_0.columns = ['시군구', '빈도수']\n",
    "\n",
    "fig = px.bar(sgg_0, x='시군구', y='빈도수', title='그룹 0의 시도별 빈도수', labels={'시군구':'시군구', '빈도수':'빈도수'})\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e0e5d75b",
   "metadata": {},
   "outputs": [],
   "source": [
    "counter_0 = group_0['LAND_USE_CODE'].value_counts().reset_index()\n",
    "counter_0.columns = ['용도', '빈도수']\n",
    "counter_0['비율'] = counter['빈도수'] / counter['빈도수'].sum()\n",
    "\n",
    "# 카운터 플롯 그리기\n",
    "fig = px.bar(counter_0, x='용도', y='빈도수', title='그룹 0의 용도별 빈도수', labels={'용도':'용도', '빈도수':'빈도수'})\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0b7471eb",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig = px.pie(counter_0, values='빈도수', names='용도', title='Cluster 0 용도 분포')\n",
    "fig.update_traces(textinfo='percent', textposition='inside', insidetextorientation='radial',\n",
    "                      texttemplate='%{label} (%{percent:.1%})' if counter_0['비율'].max() > 0.03 else '')\n",
    "\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "43800890",
   "metadata": {},
   "source": [
    "### 그룹 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "17104dd4",
   "metadata": {},
   "outputs": [],
   "source": [
    "sgg_1 = group_1['SIGUNGU_NAME'].value_counts().reset_index()\n",
    "sgg_1.columns = ['시군구', '빈도수']\n",
    "\n",
    "fig = px.bar(sgg_1, x='시군구', y='빈도수', title='그룹 1의 시도별 빈도수', labels={'시군구':'시군구', '빈도수':'빈도수'})\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b137c656",
   "metadata": {},
   "outputs": [],
   "source": [
    "counter_1 = group_1['LAND_USE_CODE'].value_counts().reset_index()\n",
    "counter_1.columns = ['용도', '빈도수']\n",
    "counter_1['비율'] = counter['빈도수'] / counter['빈도수'].sum()\n",
    "\n",
    "# 카운터 플롯 그리기\n",
    "fig = px.bar(counter_1, x='용도', y='빈도수', title='그룹 1의 용도별 빈도수', labels={'용도':'용도', '빈도수':'빈도수'})\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "91d030f4",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig = px.pie(counter_1, values='빈도수', names='용도', title='Cluster 1 용도 분포')\n",
    "fig.update_traces(textinfo='percent', textposition='inside', insidetextorientation='radial',\n",
    "                      texttemplate='%{label} (%{percent:.1%})' if counter_1['비율'].max() > 0.03 else '')\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca73ae08",
   "metadata": {},
   "source": [
    "### 그룹 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b63f0cc8",
   "metadata": {},
   "outputs": [],
   "source": [
    "sgg_2 = group_2['SIGUNGU_NAME'].value_counts().reset_index()\n",
    "sgg_2.columns = ['시군구', '빈도수']\n",
    "\n",
    "fig = px.bar(sgg_2, x='시군구', y='빈도수', title='그룹 2의 시도별 빈도수', labels={'시군구':'시군구', '빈도수':'빈도수'})\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5a2edd4f",
   "metadata": {},
   "outputs": [],
   "source": [
    "counter_2 = group_2['LAND_USE_CODE'].value_counts().reset_index()\n",
    "counter_2.columns = ['용도', '빈도수']\n",
    "counter_2['비율'] = counter['빈도수'] / counter['빈도수'].sum()\n",
    "\n",
    "# 카운터 플롯 그리기\n",
    "fig = px.bar(counter_2, x='용도', y='빈도수', title='그룹 2의 용도별 빈도수', labels={'용도':'용도', '빈도수':'빈도수'})\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4e86acff",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig = px.pie(counter_2, values='빈도수', names='용도', title='Cluster 2 용도 분포')\n",
    "fig.update_traces(textinfo='percent', textposition='inside', insidetextorientation='radial',\n",
    "                      texttemplate='%{label} (%{percent:.1%})' if counter_2['비율'].max() > 0.03 else '')\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cdff96a8",
   "metadata": {},
   "source": [
    "### 그룹 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2cf62ae9",
   "metadata": {},
   "outputs": [],
   "source": [
    "sgg_3 = group_3['SIGUNGU_NAME'].value_counts().reset_index()\n",
    "sgg_3.columns = ['시군구', '빈도수']\n",
    "\n",
    "fig = px.bar(sgg_3, x='시군구', y='빈도수', title='그룹 3의 시도별 빈도수', labels={'시군구':'시군구', '빈도수':'빈도수'})\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "330c2e31",
   "metadata": {},
   "outputs": [],
   "source": [
    "counter_3 = group_3['LAND_USE_CODE'].value_counts().reset_index()\n",
    "counter_3.columns = ['용도', '빈도수']\n",
    "counter_3['비율'] = counter['빈도수'] / counter['빈도수'].sum()\n",
    "\n",
    "# 카운터 플롯 그리기\n",
    "fig = px.bar(counter_3, x='용도', y='빈도수', title='그룹 3의 용도별 빈도수', labels={'용도':'용도', '빈도수':'빈도수'})\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "09f1d522",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig = px.pie(counter_3, values='빈도수', names='용도', title='Cluster 3 용도 분포')\n",
    "fig.update_traces(textinfo='percent', textposition='inside', insidetextorientation='radial',\n",
    "                      texttemplate='%{label} (%{percent:.1%})' if counter_3['비율'].max() > 0.03 else '')\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f53bbec",
   "metadata": {},
   "source": [
    "# 군집별 공시지가 예측 모델 만들기"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8cf43a60",
   "metadata": {},
   "source": [
    "## 데이터 불러오기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6a18e2a4",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.read_csv(mac_folder_path + \"final_data_maybe.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "43310c23",
   "metadata": {},
   "source": [
    "## 선형회귀"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a98fbabe",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import mean_squared_error, r2_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0c850fc0",
   "metadata": {},
   "outputs": [],
   "source": [
    "group_0 = data[data[\"Cluster\"] == 0]\n",
    "group_1 = data[data[\"Cluster\"] == 1]\n",
    "group_2 = data[data[\"Cluster\"] == 2]\n",
    "group_3 = data[data[\"Cluster\"] == 3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "84f30019",
   "metadata": {},
   "outputs": [],
   "source": [
    "group_1.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "91def6f5",
   "metadata": {},
   "source": [
    "### 그룹0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bd903e95",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# 데이터 준비\n",
    "X = group_0[['MEDICAL_ECONOMY', 'BUILDING_SILVER', 'TRANS', 'POP_ACADEMY', 'INFRA', 'SCHOOL_SECURITY']]\n",
    "y = group_0[\"PRICE\"]\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=715)\n",
    "\n",
    "# 선형 회귀 모델 생성 및 학습\n",
    "linear_0 = LinearRegression()\n",
    "linear_0.fit(X_train, y_train)\n",
    "\n",
    "y_train_pred = linear_0.predict(X_train)\n",
    "y_test_pred = linear_0.predict(X_test)\n",
    "\n",
    "# 성능 평가\n",
    "train_mse = mean_squared_error(y_train, y_train_pred)\n",
    "test_mse = mean_squared_error(y_test, y_test_pred)\n",
    "train_r2 = r2_score(y_train, y_train_pred)\n",
    "test_r2 = r2_score(y_test, y_test_pred)\n",
    "\n",
    "# 성능 평가 결과 출력\n",
    "print(f'Train Mean Squared Error (MSE): {train_mse}')\n",
    "print(f'Test Mean Squared Error (MSE): {test_mse}')\n",
    "print(f'Train R-squared (R2): {train_r2}')\n",
    "print(f'Test R-squared (R2): {test_r2}')\n",
    "\n",
    "labels = ['Train', 'Test']\n",
    "mse_values = [train_mse, test_mse]\n",
    "r2_values = [train_r2, test_r2]\n",
    "\n",
    "y = np.arange(len(labels))  # the label locations\n",
    "height = 0.35  # the height of the bars\n",
    "\n",
    "# 첫 번째 그래프: MSE\n",
    "fig, ax1 = plt.subplots(figsize=(10, 6))\n",
    "rects1 = ax1.barh(y, mse_values, height, color=['blue', 'blue'], alpha=0.7)\n",
    "ax1.set_xlabel('Mean Squared Error')\n",
    "ax1.set_yticks(y)\n",
    "ax1.set_yticklabels(labels)\n",
    "ax1.set_title('Training vs Test Data Performance (MSE)')\n",
    "ax1.set_xlim(0, max(mse_values) * 1.1)\n",
    "ax1.grid(True)\n",
    "\n",
    "# 텍스트 레이블 추가\n",
    "for rect in rects1:\n",
    "    width = rect.get_width()\n",
    "    ax1.annotate(f'{width:.2f}', xy=(width, rect.get_y() + rect.get_height() / 2),\n",
    "                 xytext=(3, 0), textcoords=\"offset points\",\n",
    "                 ha='left', va='center')\n",
    "\n",
    "fig.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "# 두 번째 그래프: R² Score\n",
    "fig, ax2 = plt.subplots(figsize=(10, 6))\n",
    "rects2 = ax2.barh(y, r2_values, height, color=['green', 'green'], alpha=0.7)\n",
    "ax2.set_xlabel('R² Score')\n",
    "ax2.set_yticks(y)\n",
    "ax2.set_yticklabels(labels)\n",
    "ax2.set_title('Training vs Test Data Performance (R² Score)')\n",
    "ax2.set_xlim(0, 1)\n",
    "\n",
    "# 텍스트 레이블 추가\n",
    "for rect in rects2:\n",
    "    width = rect.get_width()\n",
    "    ax2.annotate(f'{width:.2f}', xy=(width, rect.get_y() + rect.get_height() / 2),\n",
    "                 xytext=(3, 0), textcoords=\"offset points\",\n",
    "                 ha='left', va='center')\n",
    "\n",
    "fig.tight_layout()\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "62ba03d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = group_0[['MEDICAL_ECONOMY', 'BUILDING_SILVER', 'TRANS',\n",
    "       'POP_ACADEMY', 'INFRA', 'SCHOOL_SECURITY']]\n",
    "y = group_0[\"PRICE\"]\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=715)\n",
    "\n",
    "# 선형 회귀 모델 생성 및 학습\n",
    "linear_0 = LinearRegression()\n",
    "linear_0.fit(X_train, y_train)\n",
    "\n",
    "y_train_pred = linear_0.predict(X_train)\n",
    "y_test_pred = linear_0.predict(X_test)\n",
    "\n",
    "# 성능 평가\n",
    "train_mse = mean_squared_error(y_train, y_train_pred)\n",
    "test_mse = mean_squared_error(y_test, y_test_pred)\n",
    "train_r2 = r2_score(y_train, y_train_pred)\n",
    "test_r2 = r2_score(y_test, y_test_pred)\n",
    "\n",
    "# 성능 평가 결과 출력\n",
    "print(f'Train Mean Squared Error (MSE): {train_mse}')\n",
    "print(f'Test Mean Squared Error (MSE): {test_mse}')\n",
    "print(f'Train R-squared (R2): {train_r2}')\n",
    "print(f'Test R-squared (R2): {test_r2}')\n",
    "\n",
    "labels = ['Train', 'Test']\n",
    "mse_values = [train_mse, test_mse]\n",
    "r2_values = [train_r2, test_r2]\n",
    "\n",
    "x = np.arange(len(labels))  # the label locations\n",
    "width = 0.35  # the width of the bars\n",
    "\n",
    "fig, ax1 = plt.subplots(figsize=(10, 6))\n",
    "\n",
    "ax1.bar(x - width/2, mse_values, width, label='MSE', color='blue', alpha=0.7)\n",
    "ax1.set_ylabel('Mean Squared Error')\n",
    "ax1.set_title('Training vs Test Data Performance')\n",
    "ax1.set_xticks(x)\n",
    "ax1.set_xticklabels(labels)\n",
    "ax1.legend(loc='upper left')\n",
    "ax1.set_ylim(min(mse_values) * 0.5, max(mse_values) * 1.1)\n",
    "\n",
    "ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis\n",
    "ax2.bar(x + width/2, r2_values, width, label='R² Score', color='green', alpha=0.7)\n",
    "ax2.set_ylabel('R² Score')\n",
    "ax2.legend(loc='upper right')\n",
    "ax2.set_ylim(0, 0.5)\n",
    "\n",
    "fig.tight_layout()  # otherwise the right y-label is slightly clipped\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a6303ea4",
   "metadata": {},
   "source": [
    "### 그룹1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2800d1d9",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = group_1[['MEDICAL_ECONOMY', 'BUILDING_SILVER', 'TRANS',\n",
    "       'POP_ACADEMY', 'INFRA', 'SCHOOL_SECURITY']]\n",
    "y = group_1[\"PRICE\"]\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=715)\n",
    "\n",
    "# 선형 회귀 모델 생성 및 학습\n",
    "linear_1 = LinearRegression()\n",
    "linear_1.fit(X_train, y_train)\n",
    "\n",
    "y_train_pred = linear_1.predict(X_train)\n",
    "y_test_pred = linear_1.predict(X_test)\n",
    "\n",
    "# 성능 평가\n",
    "train_mse = mean_squared_error(y_train, y_train_pred)\n",
    "test_mse = mean_squared_error(y_test, y_test_pred)\n",
    "train_r2 = r2_score(y_train, y_train_pred)\n",
    "test_r2 = r2_score(y_test, y_test_pred)\n",
    "\n",
    "# 성능 평가 결과 출력\n",
    "print(f'Train Mean Squared Error (MSE): {train_mse}')\n",
    "print(f'Test Mean Squared Error (MSE): {test_mse}')\n",
    "print(f'Train R-squared (R2): {train_r2}')\n",
    "print(f'Test R-squared (R2): {test_r2}')\n",
    "\n",
    "labels = ['Train', 'Test']\n",
    "mse_values = [train_mse, test_mse]\n",
    "r2_values = [train_r2, test_r2]\n",
    "\n",
    "x = np.arange(len(labels))  # the label locations\n",
    "width = 0.35  # the width of the bars\n",
    "\n",
    "fig, ax1 = plt.subplots(figsize=(10, 6))\n",
    "\n",
    "ax1.bar(x - width/2, mse_values, width, label='MSE', color='blue', alpha=0.7)\n",
    "ax1.set_ylabel('Mean Squared Error')\n",
    "ax1.set_title('Training vs Test Data Performance')\n",
    "ax1.set_xticks(x)\n",
    "ax1.set_xticklabels(labels)\n",
    "ax1.legend(loc='upper left')\n",
    "ax1.set_ylim(min(mse_values) * 0.5, max(mse_values) * 1.1)\n",
    "\n",
    "ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis\n",
    "ax2.bar(x + width/2, r2_values, width, label='R² Score', color='green', alpha=0.7)\n",
    "ax2.set_ylabel('R² Score')\n",
    "ax2.legend(loc='upper right')\n",
    "ax2.set_ylim(0, 0.3)\n",
    "\n",
    "fig.tight_layout()  # otherwise the right y-label is slightly clipped\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f4ffc2ff",
   "metadata": {},
   "source": [
    "### 그룹2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "92ffc76d",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = group_2[['MEDICAL_ECONOMY', 'BUILDING_SILVER', 'TRANS',\n",
    "       'POP_ACADEMY', 'INFRA', 'SCHOOL_SECURITY']]\n",
    "y = group_2[\"PRICE\"]\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=715)\n",
    "\n",
    "# 선형 회귀 모델 생성 및 학습\n",
    "linear_2 = LinearRegression()\n",
    "linear_2.fit(X_train, y_train)\n",
    "\n",
    "y_train_pred = linear_2.predict(X_train)\n",
    "y_test_pred = linear_2.predict(X_test)\n",
    "\n",
    "# 성능 평가\n",
    "train_mse = mean_squared_error(y_train, y_train_pred)\n",
    "test_mse = mean_squared_error(y_test, y_test_pred)\n",
    "train_r2 = r2_score(y_train, y_train_pred)\n",
    "test_r2 = r2_score(y_test, y_test_pred)\n",
    "\n",
    "# 성능 평가 결과 출력\n",
    "print(f'Train Mean Squared Error (MSE): {train_mse}')\n",
    "print(f'Test Mean Squared Error (MSE): {test_mse}')\n",
    "print(f'Train R-squared (R2): {train_r2}')\n",
    "print(f'Test R-squared (R2): {test_r2}')\n",
    "\n",
    "labels = ['Train', 'Test']\n",
    "mse_values = [train_mse, test_mse]\n",
    "r2_values = [train_r2, test_r2]\n",
    "\n",
    "x = np.arange(len(labels))  # the label locations\n",
    "width = 0.35  # the width of the bars\n",
    "\n",
    "fig, ax1 = plt.subplots(figsize=(10, 6))\n",
    "\n",
    "ax1.bar(x - width/2, mse_values, width, label='MSE', color='blue', alpha=0.7)\n",
    "ax1.set_ylabel('Mean Squared Error')\n",
    "ax1.set_title('Training vs Test Data Performance')\n",
    "ax1.set_xticks(x)\n",
    "ax1.set_xticklabels(labels)\n",
    "ax1.legend(loc='upper left')\n",
    "\n",
    "ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis\n",
    "ax2.bar(x + width/2, r2_values, width, label='R² Score', color='green', alpha=0.7)\n",
    "ax2.set_ylabel('R² Score')\n",
    "ax2.legend(loc='upper right')\n",
    "\n",
    "fig.tight_layout()  # otherwise the right y-label is slightly clipped\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "36332bbc",
   "metadata": {},
   "source": [
    "### 그룹3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4b1a8577",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = group_3[['MEDICAL_ECONOMY', 'BUILDING_SILVER', 'TRANS',\n",
    "       'POP_ACADEMY', 'INFRA', 'SCHOOL_SECURITY']]\n",
    "y = group_3[\"PRICE\"]\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=715)\n",
    "\n",
    "# 선형 회귀 모델 생성 및 학습\n",
    "linear_3 = LinearRegression()\n",
    "linear_3.fit(X_train, y_train)\n",
    "\n",
    "y_train_pred = linear_3.predict(X_train)\n",
    "y_test_pred = linear_3.predict(X_test)\n",
    "\n",
    "# 성능 평가\n",
    "train_mse = mean_squared_error(y_train, y_train_pred)\n",
    "test_mse = mean_squared_error(y_test, y_test_pred)\n",
    "train_r2 = r2_score(y_train, y_train_pred)\n",
    "test_r2 = r2_score(y_test, y_test_pred)\n",
    "\n",
    "# 성능 평가 결과 출력\n",
    "print(f'Train Mean Squared Error (MSE): {train_mse}')\n",
    "print(f'Test Mean Squared Error (MSE): {test_mse}')\n",
    "print(f'Train R-squared (R2): {train_r2}')\n",
    "print(f'Test R-squared (R2): {test_r2}')\n",
    "\n",
    "labels = ['Train', 'Test']\n",
    "mse_values = [train_mse, test_mse]\n",
    "r2_values = [train_r2, test_r2]\n",
    "\n",
    "x = np.arange(len(labels))  # the label locations\n",
    "width = 0.35  # the width of the bars\n",
    "\n",
    "fig, ax1 = plt.subplots(figsize=(10, 6))\n",
    "\n",
    "ax1.bar(x - width/2, mse_values, width, label='MSE', color='blue', alpha=0.7)\n",
    "ax1.set_ylabel('Mean Squared Error')\n",
    "ax1.set_title('Training vs Test Data Performance')\n",
    "ax1.set_xticks(x)\n",
    "ax1.set_xticklabels(labels)\n",
    "ax1.legend(loc='upper left')\n",
    "\n",
    "ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis\n",
    "ax2.bar(x + width/2, r2_values, width, label='R² Score', color='green', alpha=0.7)\n",
    "ax2.set_ylabel('R² Score')\n",
    "ax2.legend(loc='upper right')\n",
    "\n",
    "fig.tight_layout()  # otherwise the right y-label is slightly clipped\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e9d81dca",
   "metadata": {},
   "source": [
    "## Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2824d14a",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a526d00a",
   "metadata": {},
   "source": [
    "### 그룹0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4921a623",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = group_0[['MEDICAL_ECONOMY', 'BUILDING_SILVER', 'TRANS', 'POP_ACADEMY', 'INFRA', 'SCHOOL_SECURITY']]\n",
    "y = group_0['PRICE']\n",
    "\n",
    "# 데이터셋을 학습용과 테스트용으로 분리\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=715)\n",
    "\n",
    "# 랜덤 포레스트 회귀 모델 학습 (하이퍼파라미터 설정)\n",
    "rf_0 = RandomForestRegressor(\n",
    "    n_estimators=200,\n",
    "    max_depth=10,\n",
    "    min_samples_split=5,\n",
    "    min_samples_leaf=4,\n",
    "    max_features='sqrt',\n",
    "    bootstrap=True,\n",
    "    random_state=715\n",
    ")\n",
    "rf_0.fit(X_train, y_train)\n",
    "\n",
    "y_train_pred = rf_0.predict(X_train)\n",
    "y_test_pred = rf_0.predict(X_test)\n",
    "\n",
    "# 성능 평가\n",
    "train_mse = mean_squared_error(y_train, y_train_pred)\n",
    "test_mse = mean_squared_error(y_test, y_test_pred)\n",
    "train_r2 = r2_score(y_train, y_train_pred)\n",
    "test_r2 = r2_score(y_test, y_test_pred)\n",
    "\n",
    "# 성능 평가 결과 출력\n",
    "print(f'Train Mean Squared Error (MSE): {train_mse}')\n",
    "print(f'Test Mean Squared Error (MSE): {test_mse}')\n",
    "print(f'Train R-squared (R2): {train_r2}')\n",
    "print(f'Test R-squared (R2): {test_r2}')\n",
    "\n",
    "labels = ['Train', 'Test']\n",
    "mse_values = [train_mse, test_mse]\n",
    "r2_values = [train_r2, test_r2]\n",
    "\n",
    "x = np.arange(len(labels))  # the label locations\n",
    "width = 0.35  # the width of the bars\n",
    "\n",
    "fig, ax1 = plt.subplots(figsize=(10, 6))\n",
    "\n",
    "ax1.bar(x - width/2, mse_values, width, label='MSE', color='blue', alpha=0.7)\n",
    "ax1.set_ylabel('Mean Squared Error')\n",
    "ax1.set_title('Training vs Test Data Performance')\n",
    "ax1.set_xticks(x)\n",
    "ax1.set_xticklabels(labels)\n",
    "ax1.legend(loc='upper left')\n",
    "\n",
    "ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis\n",
    "ax2.bar(x + width/2, r2_values, width, label='R² Score', color='green', alpha=0.7)\n",
    "ax2.set_ylabel('R² Score')\n",
    "ax2.legend(loc='upper right')\n",
    "\n",
    "fig.tight_layout()  # otherwise the right y-label is slightly clipped\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a551018",
   "metadata": {},
   "source": [
    "### 그룹1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f3465e6e",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = group_1[['MEDICAL_ECONOMY', 'BUILDING_SILVER', 'TRANS', 'POP_ACADEMY', 'INFRA', 'SCHOOL_SECURITY']]\n",
    "y = group_1['PRICE']\n",
    "\n",
    "# 데이터셋을 학습용과 테스트용으로 분리\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=715)\n",
    "\n",
    "# 랜덤 포레스트 회귀 모델 학습 (하이퍼파라미터 설정)\n",
    "rf_1 = RandomForestRegressor(\n",
    "    n_estimators=200,\n",
    "    max_depth=10,\n",
    "    min_samples_split=5,\n",
    "    min_samples_leaf=4,\n",
    "    max_features='sqrt',\n",
    "    bootstrap=True,\n",
    "    random_state=715\n",
    ")\n",
    "rf_1.fit(X_train, y_train)\n",
    "\n",
    "y_train_pred = rf_1.predict(X_train)\n",
    "y_test_pred = rf_1.predict(X_test)\n",
    "\n",
    "# 성능 평가\n",
    "train_mse = mean_squared_error(y_train, y_train_pred)\n",
    "test_mse = mean_squared_error(y_test, y_test_pred)\n",
    "train_r2 = r2_score(y_train, y_train_pred)\n",
    "test_r2 = r2_score(y_test, y_test_pred)\n",
    "\n",
    "# 성능 평가 결과 출력\n",
    "print(f'Train Mean Squared Error (MSE): {train_mse}')\n",
    "print(f'Test Mean Squared Error (MSE): {test_mse}')\n",
    "print(f'Train R-squared (R2): {train_r2}')\n",
    "print(f'Test R-squared (R2): {test_r2}')\n",
    "\n",
    "labels = ['Train', 'Test']\n",
    "mse_values = [train_mse, test_mse]\n",
    "r2_values = [train_r2, test_r2]\n",
    "\n",
    "x = np.arange(len(labels))  # the label locations\n",
    "width = 0.35  # the width of the bars\n",
    "\n",
    "fig, ax1 = plt.subplots(figsize=(10, 6))\n",
    "\n",
    "ax1.bar(x - width/2, mse_values, width, label='MSE', color='blue', alpha=0.7)\n",
    "ax1.set_ylabel('Mean Squared Error')\n",
    "ax1.set_title('Training vs Test Data Performance')\n",
    "ax1.set_xticks(x)\n",
    "ax1.set_xticklabels(labels)\n",
    "ax1.legend(loc='upper left')\n",
    "\n",
    "ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis\n",
    "ax2.bar(x + width/2, r2_values, width, label='R² Score', color='green', alpha=0.7)\n",
    "ax2.set_ylabel('R² Score')\n",
    "ax2.legend(loc='upper right')\n",
    "\n",
    "fig.tight_layout()  # otherwise the right y-label is slightly clipped\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "66492275",
   "metadata": {},
   "source": [
    "### 그룹2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c59b2eae",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = group_2[['MEDICAL_ECONOMY', 'BUILDING_SILVER', 'TRANS', 'POP_ACADEMY', 'INFRA', 'SCHOOL_SECURITY']]\n",
    "y = group_2['PRICE']\n",
    "\n",
    "# 데이터셋을 학습용과 테스트용으로 분리\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=715)\n",
    "\n",
    "# 랜덤 포레스트 회귀 모델 학습 (하이퍼파라미터 설정)\n",
    "rf_2 = RandomForestRegressor(\n",
    "    n_estimators=200,\n",
    "    max_depth=10,\n",
    "    min_samples_split=5,\n",
    "    min_samples_leaf=4,\n",
    "    max_features='sqrt',\n",
    "    bootstrap=True,\n",
    "    random_state=715\n",
    ")\n",
    "rf_2.fit(X_train, y_train)\n",
    "\n",
    "y_train_pred = rf_2.predict(X_train)\n",
    "y_test_pred = rf_2.predict(X_test)\n",
    "\n",
    "# 성능 평가\n",
    "train_mse = mean_squared_error(y_train, y_train_pred)\n",
    "test_mse = mean_squared_error(y_test, y_test_pred)\n",
    "train_r2 = r2_score(y_train, y_train_pred)\n",
    "test_r2 = r2_score(y_test, y_test_pred)\n",
    "\n",
    "# 성능 평가 결과 출력\n",
    "print(f'Train Mean Squared Error (MSE): {train_mse}')\n",
    "print(f'Test Mean Squared Error (MSE): {test_mse}')\n",
    "print(f'Train R-squared (R2): {train_r2}')\n",
    "print(f'Test R-squared (R2): {test_r2}')\n",
    "\n",
    "labels = ['Train', 'Test']\n",
    "mse_values = [train_mse, test_mse]\n",
    "r2_values = [train_r2, test_r2]\n",
    "\n",
    "x = np.arange(len(labels))  # the label locations\n",
    "width = 0.35  # the width of the bars\n",
    "\n",
    "fig, ax1 = plt.subplots(figsize=(10, 6))\n",
    "\n",
    "ax1.bar(x - width/2, mse_values, width, label='MSE', color='blue', alpha=0.7)\n",
    "ax1.set_ylabel('Mean Squared Error')\n",
    "ax1.set_title('Training vs Test Data Performance')\n",
    "ax1.set_xticks(x)\n",
    "ax1.set_xticklabels(labels)\n",
    "ax1.legend(loc='upper left')\n",
    "\n",
    "ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis\n",
    "ax2.bar(x + width/2, r2_values, width, label='R² Score', color='green', alpha=0.7)\n",
    "ax2.set_ylabel('R² Score')\n",
    "ax2.legend(loc='upper right')\n",
    "\n",
    "fig.tight_layout()  # otherwise the right y-label is slightly clipped\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ace53a0e",
   "metadata": {},
   "source": [
    "### 그룹3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b31e6ef0",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = group_3[['MEDICAL_ECONOMY', 'BUILDING_SILVER', 'TRANS', 'POP_ACADEMY', 'INFRA', 'SCHOOL_SECURITY']]\n",
    "y = group_3['PRICE']\n",
    "\n",
    "# 데이터셋을 학습용과 테스트용으로 분리\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=715)\n",
    "\n",
    "# 랜덤 포레스트 회귀 모델 학습 (하이퍼파라미터 설정)\n",
    "rf_3 = RandomForestRegressor(\n",
    "    n_estimators=200,\n",
    "    max_depth=10,\n",
    "    min_samples_split=5,\n",
    "    min_samples_leaf=4,\n",
    "    max_features='sqrt',\n",
    "    bootstrap=True,\n",
    "    random_state=715\n",
    ")\n",
    "rf_3.fit(X_train, y_train)\n",
    "\n",
    "y_train_pred = rf_3.predict(X_train)\n",
    "y_test_pred = rf_3.predict(X_test)\n",
    "\n",
    "# 성능 평가\n",
    "train_mse = mean_squared_error(y_train, y_train_pred)\n",
    "test_mse = mean_squared_error(y_test, y_test_pred)\n",
    "train_r2 = r2_score(y_train, y_train_pred)\n",
    "test_r2 = r2_score(y_test, y_test_pred)\n",
    "\n",
    "# 성능 평가 결과 출력\n",
    "print(f'Train Mean Squared Error (MSE): {train_mse}')\n",
    "print(f'Test Mean Squared Error (MSE): {test_mse}')\n",
    "print(f'Train R-squared (R2): {train_r2}')\n",
    "print(f'Test R-squared (R2): {test_r2}')\n",
    "\n",
    "labels = ['Train', 'Test']\n",
    "mse_values = [train_mse, test_mse]\n",
    "r2_values = [train_r2, test_r2]\n",
    "\n",
    "x = np.arange(len(labels))  # the label locations\n",
    "width = 0.35  # the width of the bars\n",
    "\n",
    "fig, ax1 = plt.subplots(figsize=(10, 6))\n",
    "\n",
    "ax1.bar(x - width/2, mse_values, width, label='MSE', color='blue', alpha=0.7)\n",
    "ax1.set_ylabel('Mean Squared Error')\n",
    "ax1.set_title('Training vs Test Data Performance')\n",
    "ax1.set_xticks(x)\n",
    "ax1.set_xticklabels(labels)\n",
    "ax1.legend(loc='upper left')\n",
    "\n",
    "ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis\n",
    "ax2.bar(x + width/2, r2_values, width, label='R² Score', color='green', alpha=0.7)\n",
    "ax2.set_ylabel('R² Score')\n",
    "ax2.legend(loc='upper right')\n",
    "\n",
    "fig.tight_layout()  # otherwise the right y-label is slightly clipped\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "562621b9",
   "metadata": {},
   "source": [
    "## XGBoost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "624ef53f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import xgboost as xgb"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a7e3422b",
   "metadata": {},
   "source": [
    "### 그룹0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a47600cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = group_0[['MEDICAL_ECONOMY', 'BUILDING_SILVER', 'TRANS',\n",
    "       'POP_ACADEMY', 'INFRA', 'SCHOOL_SECURITY']]\n",
    "y = group_0[\"PRICE\"]\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=715)\n",
    "\n",
    "dtrain = xgb.DMatrix(X_train, label=y_train)\n",
    "dtest = xgb.DMatrix(X_test, label=y_test)\n",
    "\n",
    "params = {\n",
    "    'objective': 'reg:squarederror',  # 회귀 문제 설정\n",
    "    'max_depth': 3,                   # 트리의 최대 깊이\n",
    "    'eta': 0.1,                       # 학습률\n",
    "    'subsample': 0.8,                 # 데이터 샘플링 비율\n",
    "    'colsample_bytree': 0.8           # 열 샘플링 비율\n",
    "}\n",
    "\n",
    "num_boost_round = 10000\n",
    "xg_0 = xgb.train(params, dtrain, num_boost_round)\n",
    "\n",
    "# 학습 데이터와 테스트 데이터에서의 예측값 계산\n",
    "y_train_pred = xg_0.predict(dtrain)\n",
    "y_test_pred = xg_0.predict(dtest)\n",
    "\n",
    "# 학습 데이터 성능 평가\n",
    "train_mse = mean_squared_error(y_train, y_train_pred)\n",
    "train_r2 = r2_score(y_train, y_train_pred)\n",
    "\n",
    "# 테스트 데이터 성능 평가\n",
    "test_mse = mean_squared_error(y_test, y_test_pred)\n",
    "test_r2 = r2_score(y_test, y_test_pred)\n",
    "\n",
    "print(\"Training Data Mean Squared Error (MSE):\", train_mse)\n",
    "print(\"Training Data R² Score:\", train_r2)\n",
    "print(\"Test Data Mean Squared Error (MSE):\", test_mse)\n",
    "print(\"Test Data R² Score:\", test_r2)\n",
    "\n",
    "# 성능 비교 시각화\n",
    "labels = ['Train', 'Test']\n",
    "mse_values = [train_mse, test_mse]\n",
    "r2_values = [train_r2, test_r2]\n",
    "\n",
    "x = np.arange(len(labels))  # the label locations\n",
    "width = 0.35  # the width of the bars\n",
    "\n",
    "fig, ax1 = plt.subplots(figsize=(10, 6))\n",
    "\n",
    "ax1.bar(x - width/2, mse_values, width, label='MSE', color='blue', alpha=0.7)\n",
    "ax1.set_ylabel('Mean Squared Error')\n",
    "ax1.set_title('Training vs Test Data Performance')\n",
    "ax1.set_xticks(x)\n",
    "ax1.set_xticklabels(labels)\n",
    "ax1.legend(loc='upper left')\n",
    "\n",
    "ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis\n",
    "ax2.bar(x + width/2, r2_values, width, label='R² Score', color='green', alpha=0.7)\n",
    "ax2.set_ylabel('R² Score')\n",
    "ax2.legend(loc='upper right')\n",
    "\n",
    "fig.tight_layout()  # otherwise the right y-label is slightly clipped\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fa695047",
   "metadata": {},
   "source": [
    "### 그룹1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "408bc645",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = group_1[['MEDICAL_ECONOMY', 'BUILDING_SILVER', 'TRANS',\n",
    "       'POP_ACADEMY', 'INFRA', 'SCHOOL_SECURITY']]\n",
    "y = group_1[\"PRICE\"]\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=715)\n",
    "\n",
    "dtrain = xgb.DMatrix(X_train, label=y_train)\n",
    "dtest = xgb.DMatrix(X_test, label=y_test)\n",
    "\n",
    "params = {\n",
    "    'objective': 'reg:squarederror',  # 회귀 문제 설정\n",
    "    'max_depth': 3,                   # 트리의 최대 깊이\n",
    "    'eta': 0.1,                       # 학습률\n",
    "    'subsample': 0.8,                 # 데이터 샘플링 비율\n",
    "    'colsample_bytree': 0.8           # 열 샘플링 비율\n",
    "}\n",
    "\n",
    "num_boost_round = 10000\n",
    "xg_1 = xgb.train(params, dtrain, num_boost_round)\n",
    "\n",
    "# 학습 데이터와 테스트 데이터에서의 예측값 계산\n",
    "y_train_pred = xg_1.predict(dtrain)\n",
    "y_test_pred = xg_1.predict(dtest)\n",
    "\n",
    "# 학습 데이터 성능 평가\n",
    "train_mse = mean_squared_error(y_train, y_train_pred)\n",
    "train_r2 = r2_score(y_train, y_train_pred)\n",
    "\n",
    "# 테스트 데이터 성능 평가\n",
    "test_mse = mean_squared_error(y_test, y_test_pred)\n",
    "test_r2 = r2_score(y_test, y_test_pred)\n",
    "\n",
    "print(\"Training Data Mean Squared Error (MSE):\", train_mse)\n",
    "print(\"Training Data R² Score:\", train_r2)\n",
    "print(\"Test Data Mean Squared Error (MSE):\", test_mse)\n",
    "print(\"Test Data R² Score:\", test_r2)\n",
    "\n",
    "# 성능 비교 시각화\n",
    "labels = ['Train', 'Test']\n",
    "mse_values = [train_mse, test_mse]\n",
    "r2_values = [train_r2, test_r2]\n",
    "\n",
    "x = np.arange(len(labels))  # the label locations\n",
    "width = 0.35  # the width of the bars\n",
    "\n",
    "fig, ax1 = plt.subplots(figsize=(10, 6))\n",
    "\n",
    "ax1.bar(x - width/2, mse_values, width, label='MSE', color='blue', alpha=0.7)\n",
    "ax1.set_ylabel('Mean Squared Error')\n",
    "ax1.set_title('Training vs Test Data Performance')\n",
    "ax1.set_xticks(x)\n",
    "ax1.set_xticklabels(labels)\n",
    "ax1.legend(loc='upper left')\n",
    "\n",
    "ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis\n",
    "ax2.bar(x + width/2, r2_values, width, label='R² Score', color='green', alpha=0.7)\n",
    "ax2.set_ylabel('R² Score')\n",
    "ax2.legend(loc='upper right')\n",
    "\n",
    "fig.tight_layout()  # otherwise the right y-label is slightly clipped\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9c850b95",
   "metadata": {},
   "source": [
    "### 그룹2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f9bc26b2",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = group_2[['MEDICAL_ECONOMY', 'BUILDING_SILVER', 'TRANS',\n",
    "       'POP_ACADEMY', 'INFRA', 'SCHOOL_SECURITY']]\n",
    "y = group_2[\"PRICE\"]\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=715)\n",
    "\n",
    "dtrain = xgb.DMatrix(X_train, label=y_train)\n",
    "dtest = xgb.DMatrix(X_test, label=y_test)\n",
    "\n",
    "params = {\n",
    "    'objective': 'reg:squarederror',  # 회귀 문제 설정\n",
    "    'max_depth': 3,                   # 트리의 최대 깊이\n",
    "    'eta': 0.1,                       # 학습률\n",
    "    'subsample': 0.8,                 # 데이터 샘플링 비율\n",
    "    'colsample_bytree': 0.8           # 열 샘플링 비율\n",
    "}\n",
    "\n",
    "num_boost_round = 10000\n",
    "xg_1 = xgb.train(params, dtrain, num_boost_round)\n",
    "\n",
    "# 학습 데이터와 테스트 데이터에서의 예측값 계산\n",
    "y_train_pred = xg_1.predict(dtrain)\n",
    "y_test_pred = xg_1.predict(dtest)\n",
    "\n",
    "# 학습 데이터 성능 평가\n",
    "train_mse = mean_squared_error(y_train, y_train_pred)\n",
    "train_r2 = r2_score(y_train, y_train_pred)\n",
    "\n",
    "# 테스트 데이터 성능 평가\n",
    "test_mse = mean_squared_error(y_test, y_test_pred)\n",
    "test_r2 = r2_score(y_test, y_test_pred)\n",
    "\n",
    "print(\"Training Data Mean Squared Error (MSE):\", train_mse)\n",
    "print(\"Training Data R² Score:\", train_r2)\n",
    "print(\"Test Data Mean Squared Error (MSE):\", test_mse)\n",
    "print(\"Test Data R² Score:\", test_r2)\n",
    "\n",
    "# 성능 비교 시각화\n",
    "labels = ['Train', 'Test']\n",
    "mse_values = [train_mse, test_mse]\n",
    "r2_values = [train_r2, test_r2]\n",
    "\n",
    "x = np.arange(len(labels))  # the label locations\n",
    "width = 0.35  # the width of the bars\n",
    "\n",
    "fig, ax1 = plt.subplots(figsize=(10, 6))\n",
    "\n",
    "ax1.bar(x - width/2, mse_values, width, label='MSE', color='blue', alpha=0.7)\n",
    "ax1.set_ylabel('Mean Squared Error')\n",
    "ax1.set_title('Training vs Test Data Performance')\n",
    "ax1.set_xticks(x)\n",
    "ax1.set_xticklabels(labels)\n",
    "ax1.legend(loc='upper left')\n",
    "\n",
    "ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis\n",
    "ax2.bar(x + width/2, r2_values, width, label='R² Score', color='green', alpha=0.7)\n",
    "ax2.set_ylabel('R² Score')\n",
    "ax2.legend(loc='upper right')\n",
    "\n",
    "fig.tight_layout()  # otherwise the right y-label is slightly clipped\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6bb8afc0",
   "metadata": {},
   "source": [
    "### 그룹3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a0bebb17",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = group_3[['MEDICAL_ECONOMY', 'BUILDING_SILVER', 'TRANS',\n",
    "       'POP_ACADEMY', 'INFRA', 'SCHOOL_SECURITY']]\n",
    "y = group_3[\"PRICE\"]\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=715)\n",
    "\n",
    "dtrain = xgb.DMatrix(X_train, label=y_train)\n",
    "dtest = xgb.DMatrix(X_test, label=y_test)\n",
    "\n",
    "params = {\n",
    "    'objective': 'reg:squarederror',  # 회귀 문제 설정\n",
    "    'max_depth': 3,                   # 트리의 최대 깊이\n",
    "    'eta': 0.1,                       # 학습률\n",
    "    'subsample': 0.8,                 # 데이터 샘플링 비율\n",
    "    'colsample_bytree': 0.8           # 열 샘플링 비율\n",
    "}\n",
    "\n",
    "num_boost_round = 1000\n",
    "xg_3 = xgb.train(params, dtrain, num_boost_round)\n",
    "\n",
    "# 학습 데이터와 테스트 데이터에서의 예측값 계산\n",
    "y_train_pred = xg_3.predict(dtrain)\n",
    "y_test_pred = xg_3.predict(dtest)\n",
    "\n",
    "# 학습 데이터 성능 평가\n",
    "train_mse = mean_squared_error(y_train, y_train_pred)\n",
    "train_r2 = r2_score(y_train, y_train_pred)\n",
    "\n",
    "# 테스트 데이터 성능 평가\n",
    "test_mse = mean_squared_error(y_test, y_test_pred)\n",
    "test_r2 = r2_score(y_test, y_test_pred)\n",
    "\n",
    "print(\"Training Data Mean Squared Error (MSE):\", train_mse)\n",
    "print(\"Training Data R² Score:\", train_r2)\n",
    "print(\"Test Data Mean Squared Error (MSE):\", test_mse)\n",
    "print(\"Test Data R² Score:\", test_r2)\n",
    "\n",
    "# 성능 비교 시각화\n",
    "labels = ['Train', 'Test']\n",
    "mse_values = [train_mse, test_mse]\n",
    "r2_values = [train_r2, test_r2]\n",
    "\n",
    "x = np.arange(len(labels))  # the label locations\n",
    "width = 0.35  # the width of the bars\n",
    "\n",
    "fig, ax1 = plt.subplots(figsize=(10, 6))\n",
    "\n",
    "ax1.bar(x - width/2, mse_values, width, label='MSE', color='blue', alpha=0.7)\n",
    "ax1.set_ylabel('Mean Squared Error')\n",
    "ax1.set_title('Training vs Test Data Performance')\n",
    "ax1.set_xticks(x)\n",
    "ax1.set_xticklabels(labels)\n",
    "ax1.legend(loc='upper left')\n",
    "\n",
    "ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis\n",
    "ax2.bar(x + width/2, r2_values, width, label='R² Score', color='green', alpha=0.7)\n",
    "ax2.set_ylabel('R² Score')\n",
    "ax2.legend(loc='upper right')\n",
    "\n",
    "fig.tight_layout()  # otherwise the right y-label is slightly clipped\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "56a1d1e4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.10"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {
    "height": "calc(100% - 180px)",
    "left": "10px",
    "top": "150px",
    "width": "182.378px"
   },
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
